5 物流最佳配送方案建模分析
5.1 基于不同角度的物流配送方案最优解
5.1.1 从物流配送人员（快递员）角度
从配送员角度分析要求配送员在最短时间内将所有货物配送完成，早点完成派送任务下班

5.1.2 从客户角度分析
客户们总是希望自己尽早收到自己的快递，越早收到快递客户对物流的满意度越高，但是
每次快递员配送货物的时候不可能只为一个客户服务，所以这里用每个客户收到自己快递
的平均时间来评价客户收到快递的时间。所以对于客户要求平均配送时间最短。当然这里
可以给用户按照一定评定标准制定优先级方案，显然这里会增加整个程序的复杂性，所以
这里采用KISS原则（Keep It Simple and Stupid）。

5.1.3 从物流公司角度分析
这里会假设配送员工资按小时发，S/Hour，如果快递员工作的时间越长，那么物流公司要
支付给快递员的工资也就越多。同样对于一个物流公司，如果让客户等待时间过长会对公
司造成潜在的损失，这里会按照等待时间对损失进行梯度区分。所以对于快递公司来说对
用户等待而造成的损失和发给快递员工资两者之和要尽可能小。这种配送要求是5.1.1及
5.1.2描述方案的折中方式。物流公司损失最小的直白描述就是：让员工早点下班，让客户
早点拿到包裹，省钱。

5.2 在图论基础上的最佳配送方案模型及建模背景
5.2.1 模型背景
按照真实的物流配送情况，快递员会从一个固定的点出发，然后依次派送所有包裹，最后
回到最初出发的点，假设这个点是物流公司据点。在正常情况下一个快递员会负责一个区域
的物流配送，可能是一个小区、一家公司或学校。快递公司通常会雇佣当地居民作为快递
员，因此快递员熟悉当地地形，及每家每户的位置，快递员会根据自己的经验来判断如何
选取配送顺序能分别达到5.1中描述的不同配送方案的最优解。

5.2.2 模型适应场景
在正常情况下快递员每次都会派送若干包裹，可能有几十上百个，由于配送点太多会导致
模型异常复杂，因此我们模型将会被建立成一个适用于15个点以内的图，并能让此模型适
用于大多数场景，大到全国，小到小区。按照当前各个物流公司的组织架构，通常会有一
个总部，在每个城市会有一个大的分部（仓库），会在城市的每个区设置稍微大的据点，
在每个据点会配置若干物流配送人员。这样整个物流公司的体系架构可以抽象成一颗树，
当然是一颗多叉数，下面举个例子：
	某一物流公司总部在背景，每天会有大量包裹分发到全国各地，因此此物流公司会在
华南、华北、西南、西北、华东、华中、东北七处设置据点，以华中为例，主要是在湖北
会选取武汉等城市作为再小一级的分部，再以武汉为例，会选取武汉的若干个区作为分部，
最后细分到学校及小区后开始对物流进行配送。
	从以上经典物流公司架构上来看，总部是一颗树的根节点，全国各个大区是这颗树的
一级子节点，依次向下分，最终我们看到的是一颗多叉树，每个节点会拥有多个子节点，
但是每个节点的子节点数目不会太多，通常不会超过节点，最终的快递员是叶子节点，负责
将包裹派送给客户。我们的模型适用维15个节点以内的情况，因此我们可以在每个节点及
这个节点的子节点用此模型进行最优解求解。据以上分析，我们的模型适用于大多数情况
下的物流场景并能快速计算出不同配送要求下的最佳配送方案。

5.2.3 最终配送模型
最终的物流配送方案模型会建立成一个有向连通带权图，建立成有向图的原因是某两个节点
之间的路线可能是单行的，而且在不同方向上的代价可能不一样;带权的原因是不同两点
之间的距离及路线状况，这里权值便是两点之间行走的时间; 要求连通的原因是要求图中的
每个节点都能从起始点到达，并从图中任意一点都能有路线回到原点。每个配送节点或作为
图中的一个点，任意两点之间路程要作为两点之前边的权值，最终要求从原点出发经过每个
节点（配送完所有货物）最后再回到原点。
 
6 不同情况下的物流配送方案技术细节分析
6.1 在5中建立的模型基础上求解所用到的算法
在整个求解过程中会用到floyd最短路径算法，并会用到在此最短路径算法基础上的最短路径发现
算法,在整个求解大框架下用到的枚举及全排生成算法，并在以上算法的基础上对输入数据进行连通
性检测，并对数据合法性进行检测。

6.2 floyd算法
此算法在最短路径中用的比较多，算法思想在其它论文中也有大量介绍，因此在此处只对此算法进行
简单介绍。floyd算法是对动态规划（DP）思想的经典应用，在两点当前距离已知的情况下寻找是否
会有经过第三个点能让两点之间距离更短的路径，如果有则替换当前的最小值，如果没有则当前结
果就是两点之间最短路径。经典DP方程是，dp[a][b] = MIN(dp[a][c] + dp[c][b])(0<=c<=num_of_pot).
整个算法的复杂度维O(n^3). 当整个算法跑完之后dp[a][b]表示的是从a节点到b节点之间的最短距离。

6.2 在floyd算法基础上的最短路径发现
经典的floyd算法只是找到两点之间的最短路径，最终算法得到的结过只是任意两点之间节点的最短路径
长度，至于具体怎么走走哪条路并没有给出明确的记录。因为在我们的模型中最终不但要找出最优结果
而其要找出最优结果经过的点和路径，要给快递员一条路径指示图，所以光有两点之间的最短路是不行的
还得找出最短路的具体路线，这就要求在floyd算法运行过程中根据其DP思想在最短路径的计算过程中将
路径也顺便找到，其实这个实现和floyd算法思想本身是一致的，从a到b是不是最短距离要看是否能找到
第三个节点c让从a到b的距离经过c会变得更短，那么本来路径是从a到b的路径，假设找到了这样的点c
那么此时路径就要换成从a到c再从c到b的路径，因此还是同样的动态规划思想的应用，不过此时变成路径
如果发现一点c满足以上条件则path[a][b] = path[a][c] + path[c][b]. 因此在用floyd求解的过程中
在计算出两点距离dp[a][b]的同时，定义path记录路径，最终结果path[a][b]就是在从a到b最短路所经过
的路径。

6.3 在程序中枚举思想的应用
在以上分析过程中我们将图中的点限制在15个以内，通常点也就在十个左右。这样的我们的问题是从原点
出发经过每个点后再回到原点的一条最佳路径，这本身就是NP问题，当数据量大的时候是不可解的，当然
在点少的时候可以利用状态压缩DP进行解，但这无疑增加了程序的难度及扩展性，因此这里用到的是枚举
思想，枚举配送顺序，一定要注意这里枚举的是配送顺序，并不是枚举路径，并在此枚举过程中会加入适当
的减枝操作。这样枚举的复杂度是阶乘级别的，不过在点少的时候还能适应，并加以合理的减枝运行时间
还是可以接收的。在枚举过程中我们就可以计算出在以上描述的在不同要求的最优解，最终输出最优结果。

6.5 整体算法框架及思想


7 程序核心源码分析
7.1 程序功能
7.2 求解过程核心代码剖析
7.3 结果展示部分源码剖析


8 程序数据及结果分析


程序利用到的一些算法及技术细节+展示方案

算法：floyd 基于DP思想的最短路径算法
基于floyd的最短路径发现（及记录）算法
等小算法
展示方案：动态图形展示在不同要求下的物流配送最佳路径
尚未实现（带bug实现）
数据输入格式：
输入所有节点的个数n， 编号为0 - n-1，0号节点为起始点，接下来输入路径条数m，
输入m个三元组a b c，表示从a节点到b节点的距离为c，接下来输入快递员时薪，用
户等待时间公司损失区间个数p，接下来输入p组三元组，d e f，表示等待时间在等
待区间内的损失是f，区间要从小到大输入，一个区间的开头是前一个区间的结尾。
区间为左闭右开区间。
输出为不同要求下的路径
