					基于Linux的网络攻击与防御



									       摘要

			随着云计算开始出现在大家的视线里，越来越多的传统行业在转型，越来越多的传统行
		 业开始相信云，开始“上云”，那么网络作为云的基础及必备条件，安全问题一直是各大
		 云计算厂商要致力解决的问题，这里的网络安全包括局域网安全，广域网安全等。现在
		 要做的不仅仅是要能否发现攻击而且要能抵御攻击，甚至是在攻击发生之前就能探测到
		 攻击即将来临。对于局域网安全方面也是尤为重要，我们知道在像阿里云ECS这样的产品
		 线，一台ECS云主机在拥有外网带宽的情况下会有一个外网IP和内网IP，外网IP只全球唯
		 一的，内网IP是10开头的局域网IP，在内部主机交互时用到，因为阿里云致力于打造一个
		 闭环生态系统，致力于阿里云一家就能提供一站式行业问题解决方案，所以只要提供一个
		 外网出口，其余计算及网络交互全在阿里云内部系统完成，此时局域网安全会变的异常重
		 要，因为每台主机都是向外租用，无法保证开发者在上面做了什么，从安全的角度来说我
		 们必须去假设所有的开发者在上面做最坏的事情。所以局域网内的安全就显的尤为重要，
		 像这样的大系统不仅仅要能够发现内部攻击而且要能够主动防御，在攻击开始或者即将发
		 生就将攻击扼杀在摇篮中。所以对于局域网内的安全研究是非常重要的。由于在局域网内
		 的一些底层协议天生就存在一些缺陷，攻击者很容易利用这些缺陷进行攻击，窃取一些敏感
		 信息，造成经济损失。此篇论文会在原有攻击基础上对当前流行的一些云产品进行攻击及
		 相应权限获取，最后从源头上提出防御方案。


		 关键字：Linux; TCP/IP; ARP; driftnet; ettercap; 中间人; cookie; Libnet; Libpcap;
				

		 1 前言
		 1.1 研究背景
			随着网络设备的能力增强，大型局域网越来越多，会有更多的用户及网络设备处于同一
		局域网内，也就是说在同一网络中会有更多的用户数据在此局域网内流动。之前的很长一段时间
		通常是一个家庭共享一个局域网，那么在局域网内的一些数据无需进行保密也无需担心窃取，
		这种用户互信的网络不用担心局域网安全问题，但是随着局域网越来越大，很多情况是一个大实验室
		一个小区，甚至是一个学校共用一个大型局域网，局域网中接入的不同网络设备越来越多，每个
		接入局域网的用户是互不认识，如果在此类型网络中有恶意设备接入，或有恶意攻击者的存在将会
		导致局域网的安全性问题，尤其是在这个网络环境中没有高水平的管理员的情况下就很容易造成
		局域网内产生的攻击长期不被发现，造成局域网内用户在网络上传输的数据长期被监视。当前
		整个互联网上80%左右的数据流量都是由http产生，由于用https进行加密会造成大量客户端及
		服务器端加解密的大量CPU资源消耗，很多web服务器并没有提供https访问，这就造成大量个人
		私有数据是在局域网内以明文传输，这样有心人就可以利用这点通过网络嗅探或中间人攻击等
		技术来获取特定用户在网络上传输的数据。我们知道并不是所有人都理解网络，局域网中的用户
		大多数都是网络小白，不知道甚至没有网络安全的意识，他们会有意无意的将自己的数据用http
		以明文的形式发送到网络中，如果这些数据很机密，或者存在很大的潜在价值就很有可能被有心人
		窃取造成信息泄漏，因此会造成大量经济损失和犯罪。因此在局域网内的安全要格外重视，一不
		小心就可能让有心人拿到你的私人信息，如果对方是白帽子还好，如果是黑帽子就及有可能会
		将你一些不为人知的秘密公开。

		 1.2 主要研究内容（还可以加一些名词解释什么的）
			ARP是局域网内最基础也是最重要的网卡与网卡之间的通信协议，由于一般一台主机配备一块
		或多块网卡，所以ARP也是主机之间底层网络的一个通信协议。我们知道像ARP这种用于局域网内的
		通信协议是一种无状态的协议，不像TCP那样复杂，更没有什么端口的概念，所以想向某台主机的
		网卡发送伪造的ARP请求或应答报文是非常容易的，由于没有状态，在构造数据包及向受害主机发送
		的时候更本就不需要什么前奏，因此造成的结果是在局域网内进行ARP攻击非常容易。这篇论文以
		ARP攻击为基础，在拿到目标主机或者说整个局域网内所有主机在网络上传输的数据后，根据自己
		的需要过滤出感兴趣的一部分数据进行相应的账户窃取，数据恶意修改，对目标主机行为进行监视。
		具体研究及工作如下：
			（1）研究ARP欺骗攻击的原理，借助工具实现ARP攻击及自行编写代码构造数据包两种方式实现
		ARP中间人攻击。主要目的是学习底层网络的数据传输模式，及一些基本的底层网络数据传输知识。

			（2）在ARP欺骗攻击成功的情况下对网络数据进行嗅探，拿到发往阿里云OSS的HTTP请求数据包
		头部，通过程序分析请求类型，请求产生什么样的效果，并对HTTP请求头部进行改造，完成之后将请求
		像aliyun OSS集群重放此请求，达到恶意数据篡改的效果，并在此过程中演示一些存放在OSS上的可执行
		文件的一些修改，进而实现恶意程序的植入。

			（3）同样在ARP欺骗攻击的基础上捕获到某主机与百度云的交互，由于百度云是以HTTP协议作为数据
		的载体，以明文发送，因此只要能拿到HTTP请求中的cookie，并借助firefox的提供的开源cookie注入插件
		在每次向百度云发送请求的时候将指定cookie注入到HTTP请求头部中去，就能够达到身份伪造的目的，进而
		对被攻击者进行身份顶替，获取所有增删改查操作权限，百度云用户很多，百度也很慷慨，给了用户大量
		免费空间，很多用户将自己几乎所有重要的文件都备份到百度云中，因此拿到百度云的操作权限基本上就
		拿到了攻击者的所有电子秘密。当然除了百度云国内还有很多家网站可以通过这种方式进行攻击，这里选择
		百度云的原因是百度云拥有的用户量最多，拿到相应的操作权限后得到的数据最多，回报最大。

			（4）对特定主机，或整个网络上的数据进行监视，获取网络上的一些图片、音频、视频等流媒体文件
		并在本机实时播放，借此可以监视受害者几乎一切操作行为而无需拿到其主机的操作权限。在此攻击过程中
		会借助开源工具driftnet进行实现，在实验过程中对源码进行分析，并修改其源码增加一些笔者需要的功能
		并借此机会学习网络监视程序的架构及实现方式，最重要的是通过工具分析网络包的方式来直观体会下网络
		协议栈的工作模式，在工具对数据包进行剥离的时候掌握协议栈的拆解包模式，并借此提高自己的源码阅读
		能力。


			（5）研究一些开源网络库的使用方式，如进行网络请求收发的Libcurl，进行底层网络数据包捕获
		的Libpcap，进行网络数据包构造及发送的libnet等开源网络库，在熟悉其使用方式后分析其源码。

			（6）研究Linux下一些常用网络工具的使用方式，在使用过程中通过阅读源码等方式来进一步研究其底
		层实现方式，这些工具包括nmap、ettercap、netstat、ifstat、tcpdump、wireshark等。
			
			（7）对局域网内的ARP协议进行防御，给出一些现存已有优秀的一些防御方式，并给出部分实现。

		1.3 章节安排
			此篇论文章节安排
			第一部分主要介绍该论文的研究背景及主要研究内容
			第二部分介绍ARP欺骗攻击，主要ARP协议的特征，及网络数据在局域网内的传输方式，及网卡从
				网络上接受到一个数据包的处理方式，ARP攻击原理
			第三部分主要介绍针对阿里云OSS的数据恶意篡改攻击
			第四部分研究基于ARP进行网络数据嗅探，对特定账户（百度云）进行操作权限获取
			第五部分研究基于ARP欺骗工具的网络数据监视，并对driftnet核心代码进行剖析
			第六部分研究一些开源网络库的使用方式，并利用这些开源网络库进行网络数据包的捕获、构造、及
				发送
			第七部分主要给出局域网内ARP欺骗攻击的一些防御方式
			第八部分总结在整个论文中用到的一些网络工具，总结论文成果及写作过程中遇到的一些问题，并
				对整个论文的写作过程进行总结

		2 ARP欺骗攻击
		
		2.1 ARP欺骗攻击存在的原因
		2.1.1 ARP工作原理
			ARP是一种局域网内非常重要的一种底层通信协议，提供IP到网络设备硬件地址的一种映射关系，一个
		IP映射唯一一个MAC地址，这样当一个数据包进入到局域网内部进行传输的时候，网络设备会根据数据包的IP
		地址找到其映射的MAC地址（这里假设从外界进入到局域网内的数据包一定是有某台网络设备进行接收），
		找到目标网络MAC地址之后进行局域网内以太网（假设此局域网是以太网）封装，然后网络设备将此数据包
		发送给局域网内的特定主机网卡。每台主机或者说是网络设备会缓存一个IP和地址的映射表，这个表在一定
		时间内会过期，当有一个数据在局域网内要从A主机发送到B主机，IP分别为IPA和IPB，首先A主机会从自己
		的ARP缓存中搜索是否有IPB对应的MAC地址，如果有就用这个MAC对数据包进行以太网封装，完成之后将其发送
		到网络中，如果A主机在ARP缓存中没有发现IPB对应的MAC地址，那么主机A就会在网络中广播ARP请求报文，
		谁知道IPB对应的的MAC地址告诉我，当B主机收到这条广播消息的时候发现这个消息是请求自己的IP与MAC地址
		的映射关系，主机B会将自己的IP与MAC地址的映射关系一ARP应答的形式单播发送给主机A，这样A收到这个应答
		后将映射关系插入到自己的ARP缓存中。有时候主机也会不定时的向网络中发送自己的IP与MAC地址的映射关系
		，当然这个依赖于主机网络协议栈的版本及实现方式。当主机接受到一个新的ARP应答会很相信这个应答，会
		将应答携带的IP与地址映射关系插入（更新）ARP缓存中而不进行类似认证等操作。

		2.1.1 ARP无状态的含义
			ARP请求报文和应答报文之间没有关系，两者可以随意出现在网络中在没其他条件下被网络中的其他网络
		设备接收并产生应答，也就是说ARP应答消息可以随时出现在网络中，不需有ARP请求报文的出现也可以出现
		在网络中。简单的说就是，有请求不一定有应答，有应答不一定有请求，应答报文和请求报文没有任何的
		关系，两个可以任意的出现在网络中被网络设备接收在没有外界检测的情况下被怀疑。这给ARP欺骗攻击提供
		先天性的有利条件。

		2.1.2 网卡接收数据帧及网络协议栈接受到数据包的处理方式
			在网卡的混杂模式下，网卡会将所有经过该网卡的所有数据全部都传输给上层网络协议栈，但是在正常
		情况下网卡只接受目的MAC地址与本网卡MAC地址一致的网络数据包，在接受到数据帧首先会检测数据此数据
		帧对应的MAC地址是否与此网卡MAC地址匹配，如匹配则将此数据包传递给上层网络协议栈，否则直接默默丢
		弃此数据包而无任何相应。当上层网络协议栈接收到来自网卡的数据会分离出IP地址，并与本机IP地址进行
		匹配，如果一致则将此数据包提交给再上层的网络协议栈如TCP、UDP等，如果不匹配直接默默丢弃此数据包
		。当更上层的网络协议栈比如TCP接收到IP层传输过来的数据包，假设是SYN包，如果对应端口打开则与之进
		行TCP三次握手，如果端口未打开则直接发送 TCP RST报文。所以只要将数据引向恶意主机，此恶意主机便
		可获取到本应发送到受害者主机的数据，进而可以对数据进行偷窥分析。

		2.2 ARP欺骗攻击原理
			ARP欺骗的核心在于欺骗，举个例子，假设A想发送一个报文给B，此时C告诉A，我就是B，结果A相信了
		就把本应该发送给B的数据发送给了C，C为了不让B知道在偷看完数据后将数据在转发给B，这样A没有发现
		自己发送给B的数据发送给了C，B也不知道来自A的数据经过了C，同样C也告诉B自己是A，这样B发送个A的数
		据同样经过C再转发给A，C相当于一个透明的中间人，偷窥数据而不被发现，C同时欺骗了A和B。从技术角度
		分析，假设A、B、C的IP和MAC地址为分别为IP_A/MAC_A、IP_B/MAC_B、IP_C/MAC_C，C定期构造ARP应答报文
		告诉A IP_B 对应的MAC地址为MAC_C，告诉B IP_A对应的MAC地址为MAC_C, 然后A就以为C是B，B以为C是A，
		然后C知道谁是A谁是B，C对接收到AB之间后报文转发。

		2.3 ARP 报文格式，图

		2.4 ARP 攻击的代码实现
			向网络中的指定机器发送ARP应答，如果目的MAC地址为广播地址则向网络总的所有机器发送ARP应答。
		此实现接触Libnet对数据包进行构造及发送，当然直接利用Linux 原始套接字对数据包进行构造发送也行。
		主要代码及解释如下：
		创建Libnet的的一个句柄
			l = libnet_init(LIBNET_LINK_ADV, device, err_buf);
		进行ARP报文的构造
			libnet_build_arp( // construct arp packet
            ARPHRD_ETHER, // hardware type ethernet
            ETHERTYPE_IP, // protocol type
            MAC_ADDR_LEN, // mac length
            IP_ADDR_LEN, // protocol length
            ARPOP_REPLY, // op type
            (u_int8_t*)src_mac, // source mac addr这里作用是更新目的地的ARP表 IP-MAC
            (u_int8_t*)&src_ip, // source ip addr
            (u_int8_t*)dest_mac, // dest mac addr
            (u_int8_t*)&dest_ip, // dest ip addr
            NULL, // payload
            0, // payload length
            l, // libnet context
            0 //0 stands to build a new one
            );
		给构造好的ARP报文添加以太网头部
            p_tag = libnet_build_ethernet( // create ethernet header
	        (u_int8_t*)dest_mac, // dest mac addr
            (u_int8_t*)src_mac, // source mac addr
            ETHERTYPE_ARP, // protocol type
            NULL, // payload
            0, // payload length
            l, // libnet context
            0 // 0 to build a new one
            );
		将构造好的数据包发送到网络中
		libnet_write(l)			
		销毁Libnet句柄
		libnet_destroy(l);

		以上代码中libnet_build_ethernet 中的参数dest_mac如果为指定主机网卡的硬件地址则单播给该机器
		如果为广播地址则广播给网络上的所有主机，对于参数src_mac 如果更改了可以伪装自己。

		3 ARP欺骗攻击下的网络嗅探进行阿里云OSS数据恶意篡改
		
		3.1 什么是阿里云OSS，及使用方式
			OSS是Open Storage Service的简称，是阿里云对外提供的海量数据存储服务。要使用OSS首先去阿里
		云官网上注册帐号并开通OSS服务，帐号注册完成后会获取到一对access-id 和 access-key，在每次发送
		请求的时候会根据这对access-id 和 access-key及相关http头部及时间计算处一个签名，并插入到http头部
		中作为请求认证，插入的头部为 Authorization：OSS + 签名字符串。在请求发往OSS服务器的时候服务器会
		根据相关信息计算处一个签名，只要此签名认证通过就执行http请求所要求的操作。每次请求会有发生的时间
		只要请求发生时间与服务器时间相差在15分钟之内通过验证的请求就都会被接受。以上所叙述是在bucket
		操作需要一定权限的情况下，倘若bucket所有权限公开，则无需进行签名认证。OSS每个外部用户可创建10个
		bucket，每个bucket内放置的object个数没有限制。OSS会根据bucket名及object名加上数据存放的数据中心
		生成全球唯一的URL，提供高并发的访问能力。OSS提供PUT GET HEAD 等若干操作。

		3.2 OSS数据恶意修改原理
			此攻击方式通过捕获到局域网内发往阿里云OSS的请求，由于OSS请求都是基于HTTP的，故可以解析出
		所有的HTTP头部，由于在认证中没有将Content-Length及Content-Md5加入到签名验证中，而且HTTP请求头部
		的认证在与服务器时间相差15分钟以内都有效，故可以利用这个缝隙（这个缝隙已足够长），将HTTP头部
		修改之后将其重放给OSS服务器，进行OSS请请求重放攻击。OSS会根据HTTP请求头部的Content-Length来
		接收HTTP携带的数据，如过HTTP请求携带的数据多于Content-Length则截断，小于则等待更多的数据送达。
		因此我们只要将PUT请求中的Content-Length字段恶意修改成0,那么每次PUT进OSS上的数据就会被清空，
		也就是说文件还在，文件内容没了，这就达到我们删除的目的。如果想对数据进行篡改则直接修改Content
		-Length字段及跟在HTTP PUT请求的数据，将Content-Length修改成我们篡改后的数据长度，将HTTP PUT请求
		后跟随的一些数据修改成我们恶意篡改后的数据。

		3.3 攻击方法及过程



		3.5 此攻击防范措施及代价
