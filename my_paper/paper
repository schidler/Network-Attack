					基于Linux的网络攻击与防御



						摘要

			随着云计算开始出现在大家的视线里，越来越多的传统行业在转型，越来越多的传统行
		 业开始相信云，开始“上云”，那么网络作为云的基础及必备条件，安全问题一直是各大
		 云计算厂商要致力解决的问题，这里的网络安全包括局域网安全，广域网安全等。现在
		 要做的不仅仅是要能否发现攻击而且要能抵御攻击，甚至是在攻击发生之前就能探测到
		 攻击即将来临。对于局域网安全方面也是尤为重要，我们知道在像阿里云ECS这样的产品
		 线，一台ECS云主机在拥有外网带宽的情况下会有一个外网IP和内网IP，外网IP只全球唯
		 一的，内网IP是10开头的局域网IP，在内部主机交互时用到，因为阿里云致力于打造一个
		 闭环生态系统，致力于阿里云一家就能提供一站式行业问题解决方案，所以只要提供一个
		 外网出口，其余计算及网络交互全在阿里云内部系统完成，此时局域网安全会变的异常重
		 要，因为每台主机都是向外租用，无法保证开发者在上面做了什么，从安全的角度来说我
		 们必须去假设所有的开发者在上面做最坏的事情。所以局域网内的安全就显的尤为重要，
		 像这样的大系统不仅仅要能够发现内部攻击而且要能够主动防御，在攻击开始或者即将发
		 生就将攻击扼杀在摇篮中。所以对于局域网内的安全研究是非常重要的。由于在局域网内
		 的一些底层协议天生就存在一些缺陷，攻击者很容易利用这些缺陷进行攻击，窃取一些敏感
		 信息，造成经济损失。此篇论文会在原有攻击基础上对当前流行的一些云产品进行攻击及
		 相应权限获取，最后从源头上提出防御方案。


		 关键字：Linux; TCP/IP; ARP; driftnet; ettercap; 中间人; cookie; Libnet; Libpcap; nc;


				       Abstract

			With the cloud computing arise in our life, more and more traditional industry
		and people choose to believe cloud computing. More of them try to move their business
		into cloud, and the network as the basic of cloud computing, security become an 
		important problem that all Cloud computing ventor wants to solve. The security here 
		we talk about including LAN security WLAN security and so on. What should we do now is not
		just find if attack was going on but try to defense it. If we can detect the attack which 
		is about to happen, that's better. As for the LAN security is far more important. We all know
		that the product like aliyun ECS, one ECS not only have extranet IP but also have 
		intranet IP, extranet IP is unique in the world, intranet IP begin with 10 also called
		LAN IP. The intranet IP is used when this host connect with another host which is also
		an ECS. Because aliyun dedicate to build a closed-loop ecosystem, and try to solve and 
		provide all the technical problems and service, provide all you need, so ECS only need
		to provide an extranet IP and all other works will all done in intranet. Because all 
		the host is vented by developer, we can't make sure all the bad things that developer 
		wil never do. From security point of view, we must make a hypothesis that all the 
		developer do the worst things in ECS. In that case, LAN security become extremely important
		The system as big as aliyun ECS not only need to find the attack in advance but also need to 
		defense the attack in advance and do active defense, stop the attack before attack
		about to going on. So the study of LAN security is really count. Because of the protocal
		already exist in LAN born with defects, attacker will make use of this defects do
		attack easily, get some sensitive information, lead to economic losses.This paper 
		based on the attack methods which is already exist in LAN and do some attack againt 
		some cloud products witch is popular in our daily life and try to get some operate 
		privileges.
				
		Keywords: Linux; TCP/IP; ARP; driftnet; ettercap; man in the middle; cookie; Libnet; Libpcap;
		        nc;
		 1 前言
		 1.1 研究背景
			随着网络设备的能力增强，大型局域网越来越多，会有更多的用户及网络设备处于同一
		局域网内，也就是说在同一网络中会有更多的用户数据在此局域网内流动。之前的很长一段时间
		通常是一个家庭共享一个局域网，那么在局域网内的一些数据无需进行保密也无需担心窃取，
		这种用户互信的网络不用担心局域网安全问题，但是随着局域网越来越大，很多情况是一个大实验室
		一个小区，甚至是一个学校共用一个大型局域网，局域网中接入的不同网络设备越来越多，每个
		接入局域网的用户是互不认识，如果在此类型网络中有恶意设备接入，或有恶意攻击者的存在将会
		导致局域网的安全性问题，尤其是在这个网络环境中没有高水平的管理员的情况下就很容易造成
		局域网内产生的攻击长期不被发现，造成局域网内用户在网络上传输的数据长期被监视。当前
		整个互联网上80%左右的数据流量都是由http产生，由于用https进行加密会造成大量客户端及
		服务器端加解密的大量CPU资源消耗，很多web服务器并没有提供https访问，这就造成大量个人
		私有数据是在局域网内以明文传输，这样有心人就可以利用这点通过网络嗅探或中间人攻击等
		技术来获取特定用户在网络上传输的数据。我们知道并不是所有人都理解网络，局域网中的用户
		大多数都是网络小白，不知道甚至没有网络安全的意识，他们会有意无意的将自己的数据用http
		以明文的形式发送到网络中，如果这些数据很机密，或者存在很大的潜在价值就很有可能被有心人
		窃取造成信息泄漏，因此会造成大量经济损失和犯罪。因此在局域网内的安全要格外重视，一不
		小心就可能让有心人拿到你的私人信息，如果对方是白帽子还好，如果是黑帽子就及有可能会
		将你一些不为人知的秘密公开。

		 1.2 主要研究内容（还可以加一些名词解释什么的）
			ARP是局域网内最基础也是最重要的网卡与网卡之间的通信协议，由于一般一台主机配备一块
		或多块网卡，所以ARP也是主机之间底层网络的一个通信协议。我们知道像ARP这种用于局域网内的
		通信协议是一种无状态的协议，不像TCP那样复杂，更没有什么端口的概念，所以想向某台主机的
		网卡发送伪造的ARP请求或应答报文是非常容易的，由于没有状态，在构造数据包及向受害主机发送
		的时候更本就不需要什么前奏，因此造成的结果是在局域网内进行ARP攻击非常容易。这篇论文以
		ARP攻击为基础，在拿到目标主机或者说整个局域网内所有主机在网络上传输的数据后，根据自己
		的需要过滤出感兴趣的一部分数据进行相应的账户窃取，数据恶意修改，对目标主机行为进行监视。
		具体研究及工作如下：
			（1）研究ARP欺骗攻击的原理，借助工具实现ARP攻击及自行编写代码构造数据包两种方式实现
		ARP中间人攻击。主要目的是学习底层网络的数据传输模式，及一些基本的底层网络数据传输知识。

			（2）在ARP欺骗攻击成功的情况下对网络数据进行嗅探，拿到发往阿里云OSS的HTTP请求数据包
		头部，通过程序分析请求类型，请求产生什么样的效果，并对HTTP请求头部进行改造，完成之后将请求
		像aliyun OSS集群重放此请求，达到恶意数据篡改的效果，并在此过程中演示一些存放在OSS上的可执行
		文件的一些修改，进而实现恶意程序的植入。

			（3）同样在ARP欺骗攻击的基础上捕获到某主机与百度云的交互，由于百度云是以HTTP协议作为数据
		的载体，以明文发送，因此只要能拿到HTTP请求中的cookie，并借助firefox的提供的开源cookie注入插件
		在每次向百度云发送请求的时候将指定cookie注入到HTTP请求头部中去，就能够达到身份伪造的目的，进而
		对被攻击者进行身份顶替，获取所有增删改查操作权限，百度云用户很多，百度也很慷慨，给了用户大量
		免费空间，很多用户将自己几乎所有重要的文件都备份到百度云中，因此拿到百度云的操作权限基本上就
		拿到了攻击者的所有电子秘密。当然除了百度云国内还有很多家网站可以通过这种方式进行攻击，这里选择
		百度云的原因是百度云拥有的用户量最多，拿到相应的操作权限后得到的数据最多，回报最大。

			（4）对特定主机，或整个网络上的数据进行监视，获取网络上的一些图片、音频、视频等流媒体文件
		并在本机实时播放，借此可以监视受害者几乎一切操作行为而无需拿到其主机的操作权限。在此攻击过程中
		会借助开源工具driftnet进行实现，在实验过程中对源码进行分析，并修改其源码增加一些笔者需要的功能
		并借此机会学习网络监视程序的架构及实现方式，最重要的是通过工具分析网络包的方式来直观体会下网络
		协议栈的工作模式，在工具对数据包进行剥离的时候掌握协议栈的拆解包模式，并借此提高自己的源码阅读
		能力。


			（5）研究一些开源网络库的使用方式，如进行网络请求收发的Libcurl，进行底层网络数据包捕获
		的Libpcap，进行网络数据包构造及发送的libnet等开源网络库，在熟悉其使用方式后分析其源码。

			（6）研究Linux下一些常用网络工具的使用方式，在使用过程中通过阅读源码等方式来进一步研究其底
		层实现方式，这些工具包括nmap、ettercap、netstat、ifstat、tcpdump、wireshark等。
			
			（7）对局域网内的ARP协议进行防御，给出一些现存已有优秀的一些防御方式，并给出部分实现。

		1.3 章节安排
			此篇论文章节安排
			第一部分主要介绍该论文的研究背景及主要研究内容
			第二部分介绍ARP欺骗攻击，主要ARP协议的特征，及网络数据在局域网内的传输方式，及网卡从
				网络上接受到一个数据包的处理方式，ARP攻击原理
			第三部分主要介绍针对阿里云OSS的数据恶意篡改攻击
			第四部分研究基于ARP进行网络数据嗅探，对特定账户（百度云）进行操作权限获取
			第五部分研究基于ARP欺骗工具的网络数据监视，并对driftnet核心代码进行剖析
			第六部分主要给出局域网内ARP欺骗攻击的一些防御方式（人的因素 技术因素）
			第七部分总结在整个论文中用到的一些网络工具，总结论文成果及写作过程中遇到的一些问题，并
				对整个论文的写作过程进行总结

		2 ARP欺骗攻击
		
		2.1 ARP欺骗攻击存在的原因
		2.1.1 ARP工作原理
			ARP是一种局域网内非常重要的一种底层通信协议，提供IP到网络设备硬件地址的一种映射关系，一个
		IP映射唯一一个MAC地址，这样当一个数据包进入到局域网内部进行传输的时候，网络设备会根据数据包的IP
		地址找到其映射的MAC地址（这里假设从外界进入到局域网内的数据包一定是有某台网络设备进行接收），
		找到目标网络MAC地址之后进行局域网内以太网（假设此局域网是以太网）封装，然后网络设备将此数据包
		发送给局域网内的特定主机网卡。每台主机或者说是网络设备会缓存一个IP和地址的映射表，这个表在一定
		时间内会过期，当有一个数据在局域网内要从A主机发送到B主机，IP分别为IPA和IPB，首先A主机会从自己
		的ARP缓存中搜索是否有IPB对应的MAC地址，如果有就用这个MAC对数据包进行以太网封装，完成之后将其发送
		到网络中，如果A主机在ARP缓存中没有发现IPB对应的MAC地址，那么主机A就会在网络中广播ARP请求报文，
		谁知道IPB对应的的MAC地址告诉我，当B主机收到这条广播消息的时候发现这个消息是请求自己的IP与MAC地址
		的映射关系，主机B会将自己的IP与MAC地址的映射关系一ARP应答的形式单播发送给主机A，这样A收到这个应答
		后将映射关系插入到自己的ARP缓存中。有时候主机也会不定时的向网络中发送自己的IP与MAC地址的映射关系
		，当然这个依赖于主机网络协议栈的版本及实现方式。当主机接受到一个新的ARP应答会很相信这个应答，会
		将应答携带的IP与地址映射关系插入（更新）ARP缓存中而不进行类似认证等操作。

		2.1.1 ARP无状态的含义
			ARP请求报文和应答报文之间没有关系，两者可以随意出现在网络中在没其他条件下被网络中的其他网络
		设备接收并产生应答，也就是说ARP应答消息可以随时出现在网络中，不需有ARP请求报文的出现也可以出现
		在网络中。简单的说就是，有请求不一定有应答，有应答不一定有请求，应答报文和请求报文没有任何的
		关系，两个可以任意的出现在网络中被网络设备接收在没有外界检测的情况下被怀疑。这给ARP欺骗攻击提供
		先天性的有利条件。

		2.1.2 网卡接收数据帧及网络协议栈接受到数据包的处理方式
			在网卡的混杂模式下，网卡会将所有经过该网卡的所有数据全部都传输给上层网络协议栈，但是在正常
		情况下网卡只接受目的MAC地址与本网卡MAC地址一致的网络数据包，在接受到数据帧首先会检测数据此数据
		帧对应的MAC地址是否与此网卡MAC地址匹配，如匹配则将此数据包传递给上层网络协议栈，否则直接默默丢
		弃此数据包而无任何相应。当上层网络协议栈接收到来自网卡的数据会分离出IP地址，并与本机IP地址进行
		匹配，如果一致则将此数据包提交给再上层的网络协议栈如TCP、UDP等，如果不匹配直接默默丢弃此数据包
		。当更上层的网络协议栈比如TCP接收到IP层传输过来的数据包，假设是SYN包，如果对应端口打开则与之进
		行TCP三次握手，如果端口未打开则直接发送 TCP RST报文。所以只要将数据引向恶意主机，此恶意主机便
		可获取到本应发送到受害者主机的数据，进而可以对数据进行偷窥分析。

		2.2 ARP欺骗攻击原理
			ARP欺骗的核心在于欺骗，举个例子，假设A想发送一个报文给B，此时C告诉A，我就是B，结果A相信了
		就把本应该发送给B的数据发送给了C，C为了不让B知道在偷看完数据后将数据在转发给B，这样A没有发现
		自己发送给B的数据发送给了C，B也不知道来自A的数据经过了C，同样C也告诉B自己是A，这样B发送个A的数
		据同样经过C再转发给A，C相当于一个透明的中间人，偷窥数据而不被发现，C同时欺骗了A和B。从技术角度
		分析，假设A、B、C的IP和MAC地址为分别为IP_A/MAC_A、IP_B/MAC_B、IP_C/MAC_C，C定期构造ARP应答报文
		告诉A IP_B 对应的MAC地址为MAC_C，告诉B IP_A对应的MAC地址为MAC_C, 然后A就以为C是B，B以为C是A，
		然后C知道谁是A谁是B，C对接收到AB之间后报文转发。

		2.3 ARP 报文格式，图

		2.4 ARP 攻击的代码实现
			向网络中的指定机器发送ARP应答，如果目的MAC地址为广播地址则向网络总的所有机器发送ARP应答。
		此实现接触Libnet对数据包进行构造及发送，当然直接利用Linux 原始套接字对数据包进行构造发送也行。
		主要代码及解释如下：
		创建Libnet的的一个句柄
			l = libnet_init(LIBNET_LINK_ADV, device, err_buf);
		进行ARP报文的构造
			libnet_build_arp( // construct arp packet
            ARPHRD_ETHER, // hardware type ethernet
            ETHERTYPE_IP, // protocol type
            MAC_ADDR_LEN, // mac length
            IP_ADDR_LEN, // protocol length
            ARPOP_REPLY, // op type
            (u_int8_t*)src_mac, // source mac addr这里作用是更新目的地的ARP表 IP-MAC
            (u_int8_t*)&src_ip, // source ip addr
            (u_int8_t*)dest_mac, // dest mac addr
            (u_int8_t*)&dest_ip, // dest ip addr
            NULL, // payload
            0, // payload length
            l, // libnet context
            0 //0 stands to build a new one
            );
		给构造好的ARP报文添加以太网头部
            p_tag = libnet_build_ethernet( // create ethernet header
	        (u_int8_t*)dest_mac, // dest mac addr
            (u_int8_t*)src_mac, // source mac addr
            ETHERTYPE_ARP, // protocol type
            NULL, // payload
            0, // payload length
            l, // libnet context
            0 // 0 to build a new one
            );
		将构造好的数据包发送到网络中
		libnet_write(l)			
		销毁Libnet句柄
		libnet_destroy(l);

		以上代码中libnet_build_ethernet 中的参数dest_mac如果为指定主机网卡的硬件地址则单播给该机器
		如果为广播地址则广播给网络上的所有主机，对于参数src_mac 如果更改了可以伪装自己。

		3 ARP欺骗攻击下的网络嗅探进行阿里云OSS数据恶意篡改
		
		3.1 什么是阿里云OSS，及使用方式
			OSS是Open Storage Service的简称，是阿里云对外提供的海量数据存储服务。要使用OSS首先去阿里
		云官网上注册帐号并开通OSS服务，帐号注册完成后会获取到一对access-id 和 access-key，在每次发送
		请求的时候会根据这对access-id 和 access-key及相关http头部及时间计算处一个签名，并插入到http头部
		中作为请求认证，插入的头部为 Authorization：OSS + 签名字符串。在请求发往OSS服务器的时候服务器会
		根据相关信息计算处一个签名，只要此签名认证通过就执行http请求所要求的操作。每次请求会有发生的时间
		只要请求发生时间与服务器时间相差在15分钟之内通过验证的请求就都会被接受。以上所叙述是在bucket
		操作需要一定权限的情况下，倘若bucket所有权限公开，则无需进行签名认证。OSS每个外部用户可创建10个
		bucket，每个bucket内放置的object个数没有限制。OSS会根据bucket名及object名加上数据存放的数据中心
		生成全球唯一的URL，提供高并发的访问能力。OSS提供PUT GET HEAD 等若干操作。

		3.2 OSS数据恶意修改原理
			此攻击方式通过捕获到局域网内发往阿里云OSS的请求，由于OSS请求都是基于HTTP的，故可以解析出
		所有的HTTP头部，由于在认证中没有将Content-Length及Content-Md5加入到签名验证中，而且HTTP请求头部
		的认证在与服务器时间相差15分钟以内都有效，故可以利用这个缝隙（这个缝隙已足够长），将HTTP头部
		修改之后将其重放给OSS服务器，进行OSS请请求重放攻击。OSS会根据HTTP请求头部的Content-Length来
		接收HTTP携带的数据，如过HTTP请求携带的数据多于Content-Length则截断，小于则等待更多的数据送达。
		因此我们只要将PUT请求中的Content-Length字段恶意修改成0,那么每次PUT进OSS上的数据就会被清空，
		也就是说文件还在，文件内容没了，这就达到我们删除的目的。如果想对数据进行篡改则直接修改Content
		-Length字段及跟在HTTP PUT请求的数据，将Content-Length修改成我们篡改后的数据长度，将HTTP PUT请求
		后跟随的一些数据修改成我们恶意篡改后的数据。

		3.3 攻击方法及过程本机演示
			1. 从阿里云官网下载osscmd，完成后安装，并注册开通阿里云OSS服务获取id和key
			2. 创建bucket larry-page2--a
			3. 上传一个文件 ./osscmd --id=your-access-id --key=your-access-key --host=
			   oss-cn-hangzhou.aliyuncs.com put my_file oss://larry-page2--a/my_file
			   在上传过程中启动tcodump进行抓包
			   sudo tcpdump tcp port 80 -n -s 0 -w /tmp/tcp.cap
			   my_file 存放的内容为“haha”，上传完成之后下载下来发现里面存放内容确实
			   为“haha”
			4. 完成第三步之后打开 /tmp/tcp.cap 找到此请求的HTTP头部，我们关注的是那个头部签名
			   可以找到类似于下面的一段HTTP请求头部数据
			   PUT /larry-page2--a/my_file HTTP/1.1
			   Host: 192.168.0.144
			   Accept-Encoding: identity
			   Content-Length: 5
			   User-Agent: oss-python0.3.5 (linux2)
	           Host: 192.168.0.144
			   Expect: 100-Continue
			   Date: Tue, 30 Dec 2014 03:45:34 GMT
			   Content-Type: application/octet-stream
			   Authorization: OSS 15h20xmfv49qmim5pv8p85ez:CPbJXBSdqx4FDNWkGimtIoVIh

			5. 在十五分钟内将上面的HTTP PUT原封不动的请求发送给OSS 服务器，我们可以看到服务器返回HTTP
			   200 Ok

			6. 对上面HTTP头部进行修改，将Content-Length: 5 改成Content-Length：0,再把这个请求发送给OSS
			   服务器，同样返回200 Ok

			7. 结果检测，从OSS上把PUT进OSS的文件下载下来，发现内容为空，恶意删除成功。同样用上述方法可以
			   将数据恶意篡改。

			8. 请求发送方法，可以用Linux socket 与OSS服务器建立一TCP套接字，然后在程序中将请求及数据发送
			   到套接字的另一端，完成之后在客户端接收应答。还可以用Linux下提供的nc（网络瑞士军刀）直接
			   与OSS服务器建立一条TCP链接，完成之后直接将要发送的HTTP请求头部及数据输入到终端中去即可。
			   套接字实现：
			   sock_fs = socket(AF_INET, SOCK_STREAM, 0);
			   connect(sock_fd, (struct sockaddr *)&ser_addr, sizeof(ser_addr));
			   接下来将数据用send函数一次或多次将请求及数据发送给OSS服务器即可。
			   nc实现：
			   直接在Linux终端下运行 nc oss-cn-hangzhou.aliyuncs.com 80，将HTTP请求及数据贴入终端即可。

		3.5 此攻击防范措施及代价
			1. 用HTTPS代替HTTP，这样几乎可以完全避免此类攻击，包括数据偷窥等，但是造成的代价是客户端
			及服务器在请求数及网络数据量大的时候会消耗大量CPU资源，占用的CPU相比HTTP在同样的请求及数据
			下高2-3倍。

			2. 将数据md5计算出来，并将其添加进头部，并加入签名计算中，这样做的代价是如果一次传输数据过大
			计算md5要将所有数据读出进行计算，但是大多数时候数据是一边产生一边传输的，这样就会造成OSS
			很多场景下不可用。



		4.  ARP欺骗攻击下的Cookie劫持，账户操作权限获取（以百度云为例）
		4.1 cookie劫持基本原理
			cookie被用于HTTP请求用户身份的辨别，服务器用cookie来判断HTTP在传输中的状态，cookie最常见的
		用法是判断某个用户（一个浏览器）是否已经登录此网站，如果登录就不用在提用其它一些认证信息，这样
		相比于每次登录或者刷新页面都要重新认证的方法要简单方便许多，但是也造成了漏洞的出现，只要攻击者
		拿到cookie，并不需要费太大的事或者太高的技术含量就可以将你登录的网站账户劫持，并获得相当的用户
		操作权限。在利用ARP欺骗将经过受害者主机的流量导入到本机，获取流量后对数据进行过滤，获取所有HTTP
		请求头部，拿到cookie和Host，然后将cookie注入到浏览器的请求中就可以假冒受害者用户进行一系列特权
		操作。

		4.2 基本操作过程
			首先进行ARP欺骗攻击，将受害者的网络流量导入本机，并将数据进行过滤，获取到host为pan.baidu.com
		的HTTP 头部的Cookie 和 Host，利用Firefox的Js插件将获取到的cookie注入到浏览器对pan.baidu.com的请求
		中去，第一次注入成功之后接下来的操作就会由浏览器自动完成。经过以上步骤我们就可以获取到网盘的几乎
		所有操作权限了，当然不要干什么坏事，证明你能进气而其能获取操作权限就足够了。

		4.3 cookie获取及cookie注入方法
			cookie劫持方法：./driftnet -c -H pan.baidu.com, -c 表示进行HTTPcookie过滤，-H 表示过滤出Host
		为pan.baidu.com 的cookie。注意driftnet不提供这样功能，此功能是通过改造driftnet提供的功能，接下来
		的一节会对driftnet源码进行分析。
			cookie注入方法：首先在firefox浏览器上安装Cookie Injector插件，完成之后alt+C会弹出一个对话框，
		将自己劫持到的cookie贴进对话框中刷新浏览器页面即可。

		4.4 最终结果，获取百度网盘、网易云音乐及多家网站账户的操作权限。

	    5. 基于ARP的网络数据监视，及driftnet核心源码剖析

		5.1 数据监视原理
			在ARP的基础之上我们可以让经过受害主机的网络数据甚至整个网络的数据都经过本机网络，那么在本机
		就可以利用原始套接字或Libpcap库对经过本机网络数据进行收集，假设这里只收集TCP数据，那么我们只要
		将所有收集到的TCP数据进行归类，将属于不同TCP连接上的数据区分开，接下来根据这些数据内容及一些特殊
		标志来判断此段TCP数据具体是什么，可能会是HTTP数据、视频数据、音频数据等。

		5.2 数据监视内容
			理论上所有数据都会经过本机网络，只要有足够的方法，及足够的耐心总能模拟出受害者主机的一系列
		行为，但是这个代价是非常大的，尤其是涉及到加解密等操作做的时候，所以本论文在借助driftnet的基础
		对driftnet代码进行分析并修改dritnet代码，并在此基础上增加自己需要的新功能。根据driftnet已有功能
		及自己需要的功能，会对音频、视频、图像、及正常HTTP请求数据进行监视，注意的是这些数据必须都是
		未经过加密处理的明文。

		5.3 driftnet核心源码剖析

		5.3.1 driftnet 核心代码主线
			driftnet利用Libpcap库从底层网络获取从本机网卡经过的数据包，从底层网卡拿到数据包之后按照网络
		协议栈包封装的相反顺序对网络数据包进行拆分，当然从底层网卡那过来的数据会经过BPF过滤，只拿到所有
		数据包中的TCP数据，并对拿到的TCP数据按照连接进行分类，按照序列号进行排序，在TCP数据的流入过程中
		将数据交给展示模块进行展示，让mpg321进行mp3音乐播放，让数据图像在终端上进行显示等。
			程序核心流程如下：
			1. 创建一个pcap句柄，用于操作相应的网络接口interface
				pc = pcap_open_live(interface, SNAPLEN, promisc, 1000, ebuf);
	        2. 对BPF表达式filterexpr进行编译，过滤出TCP包，filterexpr = “tcp”，并将编译结果存放在filter中
				pcap_compile(pc, &filter, (char*)filterexpr, 1, 0);
			3. 将编译好的过滤条件用于底层网络数据过滤
                pcap_setfilter(pc, &filter)
			4. 获取数据链路层所使用的协议，并根据此协议判断底层网络协议头部长度，便于拆包
			   pkt_offset = get_link_level_hdr_length(pcap_datalink(pc));
			5. 完成以上过程后创建一个线程处理从底层网络传递过来的数据包，处理函数为packet_capture_thread
			   pthread_create(&packetth, NULL, packet_capture_thread, NULL);
			   在packet_capture_thread 函数中调用pcap_dispatch(pc, -1, process_packet, NULL);来
			   分发处理没一个从下层网络传递过来的网络数据包。每个数据包由process_packet函数进行
			   处理
			6. process_packet处理从底层网络传输上来的没一个数据包，并在此函数中将数据进行解包，对数据进行
			   TCP分组处理。


		5.3.2 driftnet 底层拆解包
			这部分代码属于整个driftnet的整个核心，相当于是实现了一个简单版本的网络协议栈的拆包部分，从
		底层网络中拿到包括以太网头部的数据包，这是最原始的数据包，我们要从这个数据包中拿到IP数据，判断
		这个数据属于哪个上层应用程序，并从数据中解析出TCP数据，并将所有TCP数据拿出来。这个任务主要是由
		process_packet这个函数来完成，这个函数的原型要符合Libpcap定义的包处理回调函数的格式，只有符合
		这个格式的才能参与回调而不出现语法错误，这个函数一定是要符合如下函数原型才能被pcap_loop调用：
		void callback(u_char * userarg, const struct pcap_pkthdr * pkthdr, const u_char * packet)
		首先我们看process_packet这个函数的参数
		void process_packet(u_char *user, const struct pcap_pkthdr *hdr, const u_char *pkt);
		user是pcap_loop的最后一个参数，你可以自定义一些结构传进来，再利用C中的类型转换将其解释成你需要
		的数据结构
		hdr 是收到数据包的pcap_pkthdr类型，存放的有捕获数据的长度信息等数据
		packet 是捕获的数据存放内存的首地址
		下面是拆解过程：
		1. 拆解以太网头部
			拆解包的第一步是将数据包的以太网头部去掉，因为以太网头部信息对于应用程序来说是透明的，所
		以在第一步就要将此头部去掉，直接丢弃packet前面以太网头部长度的数据就好，也就是直接丢弃以太网头部。
		现在得到的网络数据是：pkt + pkt_offset

		2. 拆解IP数据包头部
			从剩下的数据中拿出sizeof(struct ip) 长度的数据就是我们需要的IP数据包的头部
	    memcpy(&ip, pkt + pkt_offset, sizeof(ip));
		完成之后结构体struct ip ip中存放的数据就是这个包的IP首部。
		借此我们还能顺便拿到IP头部中的源Ip s和目的Ip d
		memcpy(&s, &ip.ip_src, sizeof(ip.ip_src));
		memcpy(&d, &ip.ip_dst, sizeof(ip.ip_dst));

		3. 拆解tcp头部
			由于我们的BPF表达式设置的就是只捕获TCP的包，如果Libpcap没有bug的话我们捕获到的应全是TCP包，
		这样我们下一步就是要将TCP包头部拿出来，拿出来的代码相当犀利：
		memcpy(&tcp, pkt + pkt_offset + (ip.ip_hl << 2), sizeof(tcp));
		pkt是从最底层网络拿出来的数据，pkt_offset是底层以太网头部长度，这样pkt + pkt_offset就是IP数据包
		数据，ip.ip_hl是ip数据包头部长度，这样算 pkt + pkt_offset + (ip.ip_hl << 2) 就是IP的数据部分，
		也就是TCP头部所在的位置，从这个位置开始拿出sizeof(struct tcphdr)长度的数据放入struct tcphdr tcp;
		中，也就是拿出了TCP头部数据。

		至此就完成了整个数据包的拆封过程，至于TCP携带的是什么数据，这将由我们的driftnet更上层的代码来
		负责解释。

		5.3.3 driftnet TCP数据归类及TCP连接管理
			程序需要解析出一些音频、视频、图像及一些HTTP数据，而这些数据大多数都是用TCP发送，但是同一时间
		会有大量的TCP数据到达，这样就会有不同的TCP数据交织在一起，单纯从每一个TCP数据包我们很难知道这个数据
		包里面的数据到底是什么，就算知道某个数据包中的数据是什么，如果这个数据包中的数据只是完整数据中
		的一部分，那我们还是无法将这些数据利用起来。因为每个TCP数据包在正常情况下就一定会属于某一个TCP
		连接，那么我们就可以将每个数据包进行归类，按照连接进行归类，将每个数据包中的数据放在每个连接中
		项中，来一个数据包就查找这个数据包对应的连接是否存在，如果存在就将数据插入进去如果不存在就新建
		一个连接。一个TCP的连接是一个四元组[s_ip s_port d_ip d_port]，我们已经在5.2节中顺利拿到这些数据
		在接下来的处理中只要将TCP的数据插入到每个连接中去。所以在这里程序会维护一个TCP连接池，如果来了
		一个数据包没有找到对应的连接我们就为此数据包建立一个，通常这个数据包是TCP SYN包，如果收到一个
		TCP RST包或者TCP FIN包我们就会去TCP连接池中将相应的连接销毁，同样在一个连接五分钟之内没有新的
		数据包到来我们也会将此连接销毁。这个实现相当于实现出一个抽象版的TCP协议栈中TCP数据收集部分逻辑。
		当然这里之是说个大概，具体实现中还会遇到相当多的细节。
		整个数据管理中的核心数据结构：
		typedef struct _connection {
			struct in_addr src, dst;
			short int sport, dport;
			uint32_t isn;
			unsigned int len, alloc;
			unsigned char *data;
			int fin;
			time_t last;
			struct datablock *blocks;
		} *connection;
		src、dst、sport、dport 四元组标志着一个TCP连接，在搜索个释放连接时会搜索并匹配这四个成员。
		isn 表示TCP连接的初始系列号，在拿到每个TCP数据的时候要根据系列号进行排序，防止数据乱序。
		alloc表示分配给data的空间长度，len表示已用长度。
		fin 表示是否收到TCP FIN包，标志这个连接是否要结束了。
		last表示此连接最后活跃时间，也就是最后一次收到包的时间，如果这个时间与当前时间相比超过一定
		长度程序就认为此连接已失效，不会有更新的数据到来。
		blocks 是一个datablock的一个结构指针，是数据链表的头部，也就是该连接有新数据来的时候直接
		将数据存入data中，并申请一个datablock变量存储此数据所在的位置，并将这个变量插入blocks链表
		中，这样保证TCP数据是始终有序的，在插入过程中无需对数据进行插入及移动，这样大大降低了数据
		插入及保持有序的代价。最后直接根据blocks链表取出data中的数据进行应用层解释。
		                   此处应有图

		在每次向一个连接中push数据的时候如果遇到data空间不够的情况下要分配新的内存，看看这里的内存
		分配算法
		do
			alloc *= 2;
		while (len > alloc);
		data = (unsigned char*)xrealloc(data, alloc);
		可以看出每次内存不够就按照当前量的一倍进行分配，典型的二进制指数上涨分配算法，这个分配
		方式同C++ STL string 及 vector 内存分配算法类似，在未来内存需求量未知的情况下这样分配
		可以让分配次数尽可能的少,也就是log2(MAX_MEM_USAGE)，让内存利用率保持在50%以上。

		5.3.4 TCP数据流的解释
			拿到TCP数据后对于各种数据会在TCP数据中的特殊位置有特殊标志，找到这样标志后确定数据
		性质后交给上层库函数处理，这里包括数据图像库、音频库、视频库等。出理的时候只要能确定当
		前拿到的数据之前不再缺失新数据就可将此次拿到的数据交给上层程序进行解释，在连接即将关闭
		的时候将未解释的数据提交上层程序进行解释。

		6. 局域网内ARP欺骗攻击的防御及网络攻击的防御
		
		6.1 非技术角度
			非技术角度就是人的意识，一般收到网络攻击的一些受害者通常都是网络安全意识淡薄的一些
		人，如果稍微有点网络安全意识通常不会受到很低级的攻击。像国内一些大型互联网公司比如淘宝，
		是几乎全世界黑客攻击的对象，尤其是在双十一的时候，相信有很多黑客选择在那一天对淘宝系统
		进行攻击。但是也没见系统瘫痪，原因是有一群人在防御这样的攻击，所以说只要有点安全意识，
		不在如果要输入密码的网址不是HTTPS就坚决不输入密码，绝对不在公共网络上输入对自己比较重要
		的密码，不把自己重要的数据网在像百度网盘这样的存储介质中，因为像百度网盘这种比较亲民的
		产品不适合备份重要的机密文件，因为其免费就不能给用户太多的安全性保证，但是存一些视频图像
		文件，或者说是泄漏出去也无所谓的文件还是非常好的。绝对不对陌生人或者外人透露一些你认为
		无关紧要的信息，有可能你的一条无关紧要的信息确实没那么紧要，但是若干条你的看似无关紧要
		的信息的信息连到一起就可能是一条非常敏感的信息。有那么一类人他们叫“社交工程师”，他们的
		任务就是套出一些你认为一些无关紧要的信息。还有一些自己的一些密码管理，千万不要所有网站
		用的都是一个密码，这样黑客只要破解你一个网站账户拿到密码那么就拿到你所有账户的密码，自己
		的密码也要分优先级，比如说CSDN网站的密码和支付宝密码就一定不能一样。自己的密码一定要具备
		一定的安全性，千万不要和什么生日身份证号码等公开信息挂钩。

		6.2 技术角度
			这里的技术角度说的当然是如何防御ARP欺骗攻击，因为这个攻击是以上介绍的一系列攻击方式
		基础，只要能防止ARP攻击就能防止以上任何一种攻击，当然如果有人控制运营上的上游路由器，并
		能捕获到经过上游路由器上的网络流量，那也没办法。所以这里会讨论一些已有的被动防御方式和
		主动防御方式及效果。

		6.3 已有的一些被动防御方式

		6.3.1 静态MAC项，这样的好处是可以避免一切与ARP相关的攻击，但是这样网络管理员的压力比较
		大，如果是一个机房，所有的机器都固定，在短期内不会有新机器的增加，也不会随时有新的移动
		设备接入那还好，配置一次即可，如果长期有大量移动设备接入就会大大增加网络管理员的工作量。

		6.3.2 从系统协议栈角度，去修改系统协议栈内核，让其能够检测出ARP攻击，这不失为一个优秀的
		解决方案，但是更新系统内核或协议栈并不是一件容易的事情，大量已有设备，更新内核会有想当
		大的代价，就算代价不大也很难说服所有的网络设备拥有者去更新系统。

		6.3.3 ARP攻击被动检测，在系统启动时我们先学习到网络中的MAC地址与IP的映射关系并存入到
		数据库中，在接下来每次接收到新的ARP应答的时候会已之前学习到的结果进行对比，因为MAC地址
		与IP的关系并不是经常变化的，所以在对比结果与之前的结果不一致后就产生报警。这种攻击检测
		方式确实有效，假设在此检测机器开机之前攻击就已经开始，那么此机器学习到的MAC地址与IP的
		映射关系就是经过欺骗之后虚假的映射关系，假设攻击一直不变的进行那么就不会检测到MAC地址
		的变化，也就无法检测到攻击，最后攻击停止之后会收到正确的MAC地址与IP的应答，反而会误认
		为攻击，不过如果此台机器长期运行也不会有这样问题。如果局域网内的机器数量过过大，不免
		会有大量新机器接入退出，这就直接导致了此检测方案失效。此方案的最大缺点是不能获取到正确
		的MAC地址与IP的映射关系。

		6.4 基于TCP SYN的ARP欺骗攻击主动检测及防御方式
		6.4.1 原理
			我们知道ARP欺骗归欺骗，但是真实主机是确确实实存在在网络中的，我们可以阻断其他机器
		发送数据包到受害者主机，但是我们不能阻止受害者主机自己发送数据包到网络中。在这里的TCP
		SYN方法中，会定期向局域网内的每台机器发送TCP SYN包，然后接收包应答。接下来就会分两种
		情况（针对一台机器分析），假设这台主机是遭受到ARP攻击的，那么TCP SYN包就会发往攻击者
		的主机或者一台其他的非受害者主机，那么根据网络协议栈的实现方式，底层网卡在从网络中拿到
		一个数据包之后会匹配其MAC地址是否与本机MAC地址匹配，如果匹配则将数据包移交上层网络进行
		进一步处理，否则就直接丢弃，按照这个规则，如果接受到此TCP SYN包的主机是真实主机，那么此
		主机一定会接收此数据包并将此数据包移交至上层网络，如果上层网络对应TCP端口打开就会回复
		TCP+SYN+ACK报文企图建立一条TCP连接,如果对应端口没有打开那么按照正常TCP的实现方式会发回
		一条TCP RST报文给源主机，这样源主机就能接收到来自真实主机发送的报文，并能拿到真实的MAC
		地址与IP地址映射关系。假设目的主机被欺骗，TCP SYN发往一台虚假主机或者是说根本就不存在
		的主机，如果是不存在的主机那么就会造成TCP SYN包发送超时，长时间没有回复，如果是发送给
		虚假主机造成的结果是虚假主机（在网卡没配置成转发模式的时候）匹配报文MAC地址与本机网卡
		MAC地址不匹配之后会直接将其丢弃，所有也是目的TCP SYN报文发送超时，长时间没有回复。因此
		在发送TCP SYN报文之后会出现三种情况，收到TCP+SYN+ACK报文，收到TCP RST报文，报文超时。
		在前面两种情况我们得到的一定是发自真实主机的包，后面两种一定是受到ARP攻击的情况，前提
		是要确定我们本意要发的主机确实存在在这个网络中。以上讨论的是主机路由没有打开的情况。
		从以上论述我们可以知道，不管怎样只有真实主机才能发送回TCP应答，无论是又没经过路由转发
		的情况。
			这里得强调一下，我们学习到的IP与地址映射关系都是通过ARP应答来学习的，通过判断ARP
		应答消息正确与否来判断是否存在ARP攻击。

		6.5 具体实现过程
			首先程序会捕捉到所有ARP应答报文，当拿到一个ARP应答报文后会取出其所携带的信息，得到
		ARP与地址映射关系。现在就要分一些情况，假设拿到的ARP应答报文的源MAC地址其携带的MAC地址
		与IP映射关系的MAC地址不一致，那么不同怀疑一定是ARP欺骗产生的应答，如果一致可能是发送方
		伪造了MAC地址，那么我们就直接向这个源MAC地址构造发送一条TCP SYN报文，这条报文会直接发
		出去，由于MAC地址已经构造好故不需要查看MAC与IP映射关系，完成之后假设这个MAC地址的主机
		存在就一定会发往这台机器，不管中间是否经过转发，只要最后能受到TCP SYN的应答就说明我们
		受到的这条ARP应答是没问题的，我们甚至可以检测收到的TCP SYN应答的源MAC地址是否变化来
		知道此条应答是否经过转发，这样也可以为是否有工具提供依据。最后将我们知道的正确结果存入
		我们的主机中，由于网络中的主机会定期广播自己的MAC地址IP映射关系，本机也可以请求在网络
		中的主机的IP与MAC映射关系，所以我们可以定期在局域网内广播正确的ARP 应来干扰和防止ARP
		攻击。其实局域网内机器交互比较少，大多数都是主机与网关之间的数据交互。
		
		6.6 存在的问题
			上述方法只有在接收到ARP应答包之后才能根据上述方法判断应答是否真实，假设ARP攻击者
		单独欺骗网络中的若干台机器，可能并不会选择广播ARP应答消息，而是选择单播，所以这样上述 
		方法只能检测本机是否被进行ARP欺骗攻击，不过可以将这个想法写成软件，让每台机器把它当成
		守护进程来运行，达到局域网中无ARP欺骗攻击的效果。


		7. 总结
			整篇论文主要研究为局域网内安全，主要研究点是局域网内的ARP攻击，并在此攻击的基础上
		进行了网络嗅探，cookie注入，及网络流量监视。在整个论文实现过程中会在不经意间瘫痪了实验
		室的网络，不过大多数的实验都是在无其他用户的网络环境下做的。在整个写作过程中借助了大量
		开源工具看了大量开源代码，理解了局域网数据传输方式，在期间也看了若干本关于网络安全的书。
		遗憾的是由于时间有限在很多点没能继续深入下去，深感网络的高深莫测，相信此次毕业设计的研究
		内容会在我以后的工作生活中产生巨大影响。



		参考文献
		[1]  Kevin D. Mitnick,William L Simon. The Art Of Deception[M].  北京：清华大学出版社. 2014年

		[2]  诸葛建伟 . 网络攻防技术与实践[M].  北京：电子工业出版社. 2011年.

		[3]  W. Richard Stevens, Stephen A. Rago . Advanced Programming in the UNIX Environment[M]. 
		     北京：人民邮电出版社. 2006年.

		[4] 史蒂文斯 / 芬纳 / 鲁道夫 . Unix Network Programming[M]. 北京：清华大学出版社.2006年.

		[5] （美）博韦，西斯特 . Understanding the Linux Kernel [M].北京：中国电力出版社.2007年.

		[6] Vivek Ramachandran and Sukumar Nandi. Detecting ARP Spoofing: An Active Technique[J]. 
		    2013年.


		致谢
			对于这篇论文的完成，首先要感谢我身边的人，尤其是感谢那些每天陪伴在我身边的人，这些人
		让我在想写代码学技术的时候能安安静静的在实验室写代码和研究技术，在我空的时候陪我散步陪我
		聊天。感谢那些每天在群里一起开开心心聊天的一群小伙伴们，感谢那些每天一起吃饭一起做毕页设
		计的小伙伴，感谢每天早起来实验室开门的小伙伴。当然也要感谢毕业设计本身，给了我们这一群人
		每天待在一起的理由。感谢过去三年几乎一直相伴在一起的队友，没有一起训练，一起吃泡面，一起
		拼凳子睡实验室，一起互相推荐着找工作的经历我不会有今天，怀念每天晚上捧着块西瓜便走边闹的
		场景。感谢一直支持我们参加ACM及此次毕业设计的指导老师章英老师，她不间断的关心鼓励贯穿我整
		个大学四年的成长经历。感谢在大学里我遇到的每一位讲师，你们给了我计算机的启蒙。感谢一直支持
		我的若干远方的小伙伴。感谢被我当成“家”的实验室及沸点工作室，及当时领我进沸点工作室的人。
		感谢最近一段时间陪我一起疯一起浪并教会我如何生活的神秘小伙伴，让我学到了很多知道便终生受用
		的想法。最后也最值得感谢的是为了我一直“飘”在外面的父亲母亲，感谢你们忍住一年一见的思念支持
		我在大学作出的若干选择。再次感谢以上提到的人，我从计算机小白到今天离不开你们。










